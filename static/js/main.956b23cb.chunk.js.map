{"version":3,"sources":["assets/react-logo.svg","assets/bg.png","assets/angular-ionic-logo.svg","assets/title.svg","assets/titleSM.svg","ShortlineDivider.tsx","SimpleCard.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","ShortlineDivider","theme","useTheme","style","backgroundColor","palette","primary","main","height","spacing","width","margin","useStyles","makeStyles","createStyles","wrapper","color","text","display","flexDirection","textAlign","boxShadow","shadows","transition","image","backgroundSize","backgroundRepeat","backgroundPositionX","marginBottom","body","Colors","fontSize","footer","fontWeight","marginTop","SimpleCard","props","title","packageName","url","classes","useState","version","setVersion","useEffect","fetch","encodeURIComponent","then","res","json","collected","metadata","err","fetchNpmVersion","_version","Card","className","CardContent","backgroundImage","Typography","variant","flex","Button","href","noWrap","root","ellipseBackground","background","ellipseBackgroundImage","clipPath","position","SimpleCardContainer","justifyContent","flexWrap","maxWidth","titleImage","backgroundPosition","zIndex","section","padding","sectionContentContainer","sectionTitle","sectionButtonContainer","sectionButton","sectionButtonXS","flexShrink","FAB","right","bottom","App","matchesSM","useMediaQuery","breakpoints","down","matchesXS","matches640Down","alignItems","titleImageSM","undefined","angularImage","reactImage","Fab","aria-label","Feedback","Boolean","window","location","hostname","match","ReactDOM","render","createMuiTheme","PXBThemes","CssBaseline","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.956b23cb.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/react-logo.ba3be47d.svg\";","module.exports = __webpack_public_path__ + \"static/media/bg.4f36fa00.png\";","module.exports = __webpack_public_path__ + \"static/media/angular-ionic-logo.18e46344.svg\";","module.exports = __webpack_public_path__ + \"static/media/title.58c27b55.svg\";","module.exports = __webpack_public_path__ + \"static/media/titleSM.d01ced0d.svg\";","import React from 'react';\nimport { useTheme } from '@material-ui/core/styles';\n\nexport default function ShortlineDivider(): JSX.Element {\n    const theme = useTheme();\n\n    return (\n        <div\n            style={{\n                backgroundColor: theme.palette.primary.main,\n                height: theme.spacing(0.5),\n                width: theme.spacing(7.5),\n                margin: `${theme.spacing(2)}px auto`,\n            }}\n        />\n    );\n}\n","import React, { useState, useEffect } from 'react';\nimport { makeStyles, createStyles, Theme, useTheme } from '@material-ui/core/styles';\nimport { Typography, Button, Card, CardContent } from '@material-ui/core';\nimport * as Colors from '@pxblue/colors';\nimport ShortlineDivider from './ShortlineDivider';\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        wrapper: {\n            color: theme.palette.text.primary,\n            width: 304,\n            margin: theme.spacing(1),\n            display: 'flex',\n            flexDirection: 'column',\n            textAlign: 'center',\n            '&:hover': {\n                boxShadow: theme.shadows[12],\n                transition: 'ease-in-out 200ms',\n            },\n        },\n        image: {\n            backgroundSize: 'contain',\n            height: 150,\n            backgroundRepeat: 'no-repeat',\n            backgroundPositionX: 'center',\n            marginBottom: theme.spacing(2),\n        },\n        body: {\n            color: Colors.gray[500],\n            fontSize: 14, // Kyle's recommendation\n        },\n        footer: {\n            color: Colors.gray[300],\n            fontWeight: 600,\n            marginTop: theme.spacing(3),\n            fontSize: 12, // Kyle's recommendation\n        },\n    })\n);\n\ntype SimpleCardProps = {\n    title: string;\n    body: string;\n    packageName: string;\n    image: string;\n    url: string;\n    version?: string;\n};\n\n// return the #.#.# version number as a promise\n// return empty string if unsuccessful\nfunction fetchNpmVersion(packageName: string): Promise<string> {\n    return fetch(`https://api.npms.io/v2/package/${encodeURIComponent(packageName)}`)\n        .then((res) => res.json())\n        .then((json) => {\n            let version = '-.-.-';\n            try {\n                version = json.collected.metadata.version;\n            } catch (err) {\n                version = '';\n            }\n            return version;\n        });\n}\n\nexport function SimpleCard(props: SimpleCardProps): JSX.Element {\n    const { title, body, packageName, image, url } = props;\n    const theme = useTheme();\n    const classes = useStyles(theme);\n    const [version, setVersion] = useState('-.-.-');\n    useEffect(() => {\n        fetchNpmVersion(packageName).then((_version) => setVersion(_version));\n    });\n    return (\n        <Card className={classes.wrapper}>\n            <CardContent>\n                <div className={classes.image} style={{ backgroundImage: `url(\"${image}\")` }} />\n                <Typography variant={'h5'}>{title}</Typography>\n                <ShortlineDivider />\n                <Typography className={classes.body} variant={'body1'}>\n                    {body}\n                </Typography>\n                <div style={{ flex: '1 1 0' }} />\n                <div>\n                    <Button\n                        style={{ fontWeight: 600, marginTop: theme.spacing(3) }}\n                        color=\"primary\"\n                        variant=\"outlined\"\n                        href={url}\n                    >\n                        View API\n                    </Button>\n                </div>\n                <Typography className={classes.footer} variant={'subtitle2'} noWrap={true}>\n                    {packageName} - {version && <span>v{version}</span>}\n                </Typography>\n            </CardContent>\n        </Card>\n    );\n}\n","import React from 'react';\nimport { SimpleCard } from './SimpleCard';\nimport ShortlineDivider from './ShortlineDivider';\nimport { makeStyles, createStyles, Theme, useTheme } from '@material-ui/core/styles';\nimport { Typography, Button, Fab } from '@material-ui/core';\nimport * as Colors from '@pxblue/colors';\nimport { Feedback } from '@material-ui/icons';\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\n\nimport ellipseBackgroundImage from './assets/bg.png';\nimport angularImage from './assets/angular-ionic-logo.svg';\nimport reactImage from './assets/react-logo.svg';\nimport titleImage from './assets/title.svg';\nimport titleImageSM from './assets/titleSM.svg';\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        root: {\n            display: 'flex',\n            flexDirection: 'column',\n            height: '100vh',\n        },\n        ellipseBackground: {\n            background: `url(${ellipseBackgroundImage}) ${theme.palette.primary.main}`,\n            backgroundSize: 'cover',\n            clipPath: 'ellipse(70% 200px at 50% 50px)',\n            width: '100%',\n            height: 250,\n            position: 'absolute',\n        },\n        SimpleCardContainer: {\n            margin: '0 auto',\n            justifyContent: 'center',\n            position: 'relative',\n            display: 'flex',\n            width: '100%',\n            '&.matchesSM': { flexWrap: 'wrap', justifyContent: 'unset', maxWidth: 640 },\n            '&.matchesXS': { justifyContent: 'center' },\n        },\n        title: {\n            backgroundImage: `url(\"${titleImage}\")`,\n            backgroundSize: 'contain',\n            backgroundRepeat: 'no-repeat',\n            backgroundPosition: 'center',\n            width: 500,\n            height: 64,\n            zIndex: 1,\n            margin: `${theme.spacing(2)}px 0 ${theme.spacing(3)}px`,\n        },\n        section: {\n            padding: `${theme.spacing(3)}px 0`,\n            marginTop: theme.spacing(2),\n            textAlign: 'center',\n        },\n        sectionContentContainer: {\n            maxWidth: 600,\n            margin: '0 auto',\n            padding: theme.spacing(1),\n        },\n        sectionTitle: {\n            marginBottom: theme.spacing(1),\n        },\n        sectionButtonContainer: {\n            display: 'flex',\n            justifyContent: 'center',\n        },\n        sectionButton: {\n            margin: `${theme.spacing(4)}px ${theme.spacing(1)}px`,\n        },\n        sectionButtonXS: {\n            margin: `${theme.spacing(1)}px 0`,\n        },\n        footer: {\n            backgroundColor: Colors.black[500],\n            padding: theme.spacing(2),\n            color: Colors.white[50],\n            flexShrink: 0,\n            textAlign: 'center',\n        },\n        FAB: {\n            position: 'fixed',\n            right: theme.spacing(3),\n            bottom: theme.spacing(3),\n            boxShadow: theme.shadows[10],\n        },\n    })\n);\n\nfunction App(): JSX.Element {\n    const theme = useTheme();\n    const classes = useStyles(theme);\n    const matchesSM = useMediaQuery(theme.breakpoints.down('sm'));\n    const matchesXS = useMediaQuery(theme.breakpoints.down('xs'));\n    const matches640Down = useMediaQuery('(max-width:640px)');\n    return (\n        <>\n            <div className={classes.ellipseBackground} />\n            <div className={classes.root}>\n                <div style={{ flex: '1', display: 'flex', flexDirection: 'column', alignItems: 'center' }}>\n                    <div\n                        className={classes.title}\n                        style={matchesXS ? { backgroundImage: `url(${titleImageSM})`, width: '70%' } : undefined}\n                    />\n                    <div\n                        className={`${classes.SimpleCardContainer} ${matchesSM && 'matchesSM'} ${matches640Down &&\n                            'matchesXS'}`}\n                    >\n                        <SimpleCard\n                            image={angularImage}\n                            title={'Angular / Ionic'}\n                            body={\n                                'Our Angular component library is intended for use in applications built using Angular and Angular Material. They can also be used in Ionic applications that are built with Angular. '\n                            }\n                            packageName={'@pxblue/angular-components'}\n                            url={'/angular'}\n                        />\n                        <SimpleCard\n                            image={reactImage}\n                            title={'React'}\n                            body={\n                                'Our React component library can be used for applications built using React v16+. They include strong type definitions so they will work well in either JavaScript or TypeScript projects.'\n                            }\n                            packageName={'@pxblue/react-components'}\n                            url={'/react'}\n                        />\n                        <SimpleCard\n                            image={reactImage}\n                            title={'React Native'}\n                            body={\n                                'Our React Native component library can be used for mobile applications built with React Native v0.60+. They include strong type definitions so they will work well in either JavaScript or TypeScript projects.'\n                            }\n                            packageName={'@pxblue/react-native-components'}\n                            url={'/react-native'}\n                        />\n                    </div>\n                    <div className={classes.section}>\n                        <div className={classes.sectionContentContainer}>\n                            <Typography className={classes.sectionTitle} variant={'h4'}>\n                                About\n                            </Typography>\n                            <ShortlineDivider />\n                            <Typography>\n                                These component libraries are part of the Power Xpert Blue design system. They simplify\n                                development efforts and ensure consistency across products by providing out-of-the-box\n                                components implementations for common UI elements. Our documentation uses Storybook to\n                                showcase the various ways these components can be configured.\n                            </Typography>\n                            <div\n                                className={classes.sectionButtonContainer}\n                                style={matchesXS ? { flexDirection: 'column' } : undefined}\n                            >\n                                <Button\n                                    className={matchesXS ? classes.sectionButtonXS : classes.sectionButton}\n                                    variant=\"outlined\"\n                                    color=\"primary\"\n                                    href=\"https://pxblue.github.io\"\n                                >\n                                    About us\n                                </Button>\n                                <Button\n                                    className={matchesXS ? classes.sectionButtonXS : classes.sectionButton}\n                                    variant=\"outlined\"\n                                    color=\"primary\"\n                                    href=\"https://pxblue.github.io\" // TODO: change to a valid link\n                                >\n                                    development roadmap\n                                </Button>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n                <footer className={classes.footer}>Copyright 2020 Eaton. Licensed under BSD-3-Clause.</footer>\n                <Fab\n                    color=\"primary\"\n                    className={classes.FAB}\n                    aria-label=\"feedback\"\n                    href=\"https://pxblue.github.io/community/contactus\"\n                >\n                    <Feedback />\n                </Fab>\n            </div>\n        </>\n    );\n}\n\nexport default App;\n","/* eslint-disable */\r\n// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n    window.location.hostname === 'localhost' ||\r\n        // [::1] is the IPv6 localhost address.\r\n        window.location.hostname === '[::1]' ||\r\n        // 127.0.0.0/8 are considered localhost for IPv4.\r\n        window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\r\n);\r\n\r\ntype Config = {\r\n    onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n    onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n        // The URL constructor is available in all browsers that support SW.\r\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n        if (publicUrl.origin !== window.location.origin) {\r\n            // Our service worker won't work if PUBLIC_URL is on a different origin\r\n            // from what our page is served on. This might happen if a CDN is used to\r\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n            return;\r\n        }\r\n\r\n        window.addEventListener('load', () => {\r\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n            if (isLocalhost) {\r\n                // This is running on localhost. Let's check if a service worker still exists or not.\r\n                checkValidServiceWorker(swUrl, config);\r\n\r\n                // Add some additional logging to localhost, pointing developers to the\r\n                // service worker/PWA documentation.\r\n                navigator.serviceWorker.ready.then(() => {\r\n                    console.log(\r\n                        'This web app is being served cache-first by a service ' +\r\n                            'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n                    );\r\n                });\r\n            } else {\r\n                // Is not localhost. Just register service worker\r\n                registerValidSW(swUrl, config);\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n    navigator.serviceWorker\r\n        .register(swUrl)\r\n        .then((registration) => {\r\n            registration.onupdatefound = () => {\r\n                const installingWorker = registration.installing;\r\n                if (installingWorker == null) {\r\n                    return;\r\n                }\r\n                installingWorker.onstatechange = () => {\r\n                    if (installingWorker.state === 'installed') {\r\n                        if (navigator.serviceWorker.controller) {\r\n                            // At this point, the updated precached content has been fetched,\r\n                            // but the previous service worker will still serve the older\r\n                            // content until all client tabs are closed.\r\n                            console.log(\r\n                                'New content is available and will be used when all ' +\r\n                                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n                            );\r\n\r\n                            // Execute callback\r\n                            if (config && config.onUpdate) {\r\n                                config.onUpdate(registration);\r\n                            }\r\n                        } else {\r\n                            // At this point, everything has been precached.\r\n                            // It's the perfect time to display a\r\n                            // \"Content is cached for offline use.\" message.\r\n                            console.log('Content is cached for offline use.');\r\n\r\n                            // Execute callback\r\n                            if (config && config.onSuccess) {\r\n                                config.onSuccess(registration);\r\n                            }\r\n                        }\r\n                    }\r\n                };\r\n            };\r\n        })\r\n        .catch((error) => {\r\n            console.error('Error during service worker registration:', error);\r\n        });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n    // Check if the service worker can be found. If it can't reload the page.\r\n    fetch(swUrl, {\r\n        headers: { 'Service-Worker': 'script' },\r\n    })\r\n        .then((response) => {\r\n            // Ensure service worker exists, and that we really are getting a JS file.\r\n            const contentType = response.headers.get('content-type');\r\n            if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\r\n                // No service worker found. Probably a different app. Reload the page.\r\n                navigator.serviceWorker.ready.then((registration) => {\r\n                    registration.unregister().then(() => {\r\n                        window.location.reload();\r\n                    });\r\n                });\r\n            } else {\r\n                // Service worker found. Proceed as normal.\r\n                registerValidSW(swUrl, config);\r\n            }\r\n        })\r\n        .catch(() => {\r\n            console.log('No internet connection found. App is running in offline mode.');\r\n        });\r\n}\r\n\r\nexport function unregister() {\r\n    if ('serviceWorker' in navigator) {\r\n        navigator.serviceWorker.ready\r\n            .then((registration) => {\r\n                registration.unregister();\r\n            })\r\n            .catch((error) => {\r\n                console.error(error.message);\r\n            });\r\n    }\r\n}\r\n","import 'react-app-polyfill/ie11';\r\nimport 'react-app-polyfill/stable';\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { MuiThemeProvider, createMuiTheme } from '@material-ui/core/styles';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport * as PXBThemes from '@pxblue/themes/react';\r\nimport 'typeface-open-sans';\r\n\r\nReactDOM.render(\r\n    <MuiThemeProvider theme={createMuiTheme(PXBThemes.blue)}>\r\n        <CssBaseline />\r\n        <App />\r\n    </MuiThemeProvider>,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}